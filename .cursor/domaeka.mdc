---
description: 
globs: 
alwaysApply: true
---
# Domaeka 프로젝트 개발 가이드라인

> **영카트5 기반 다계층 관리자 시스템 구현을 위한 종합 개발 규칙**

이 문서는 Domaeka 프로젝트의 핵심 기능인 **계층형 관리자 구조**를 안전하고 체계적으로 구현하기 위한 필수 가이드라인입니다. 모든 개발자는 이 규칙을 준수하여 프로젝트의 품질과 유지보수성을 확보해야 합니다.

## 📋 목차

1. [프로젝트 개요](mdc:#1-프로젝트-개요)
2. [계층형 관리자 구조](mdc:#2-계층형-관리자-구조)
3. [데이터베이스 설계](mdc:#3-데이터베이스-설계)
4. [권한 및 접근 제어](mdc:#4-권한-및-접근-제어)
5. [UI/UX 설계 원칙](mdc:#5-uiux-설계-원칙)
6. [기존 시스템 확장 원칙](mdc:#6-기존-시스템-확장-원칙)
7. [상품 및 주문 관리](mdc:#7-상품-및-주문-관리)
8. [개발 프로세스](mdc:#8-개발-프로세스)
9. [품질 관리](mdc:#9-품질-관리)
10. [부록](mdc:#10-부록)

---

## 1. 프로젝트 개요

### 1.1. 목표

기존 **영카트5(그누보드5)** 단일 관리자 시스템을 **4계층 관리자 구조**로 확장하여 도매까 비즈니스 모델을 지원합니다.

### 1.2. 핵심 원칙

| 원칙 | 설명 |
|------|------|
| **안정성 우선** | 기존 영카트/그누보드 핵심 기능 보호 |
| **확장성** | Open/Closed 원칙에 따른 기능 확장 |
| **보안** | 계층별 데이터 접근 제어 및 권한 관리 |
| **유지보수성** | 명확한 코드 구조와 문서화 |

---

## 2. 계층형 관리자 구조

### 2.1. 계층 정의

```mermaid
graph TD
    A["🏢 본사<br/>(영카트 최고관리자)"] --> B["📊 총판<br/>(Distributor)"]
    B --> C["🏪 대리점<br/>(Agency)"]
    C --> D["🏬 지점<br/>(Branch)"]
    
    A -.-> E["전체 시스템 관리"]
    B -.-> F["총판 산하 전체 관리"]
    C -.-> G["대리점 산하 지점 관리"]
    D -.-> H["지점별 상품/주문 관리"]
```

### 2.2. 계층별 역할

| 계층 | 레벨 | 주요 역할 | 접근 범위 |
|------|------|-----------|-----------|
| **본사** | 10 | 전체 시스템 관리, 최고 권한 | 모든 데이터 |
| **총판** | 8 | 도메까 최상위 관리자 | 산하 대리점/지점 전체 |
| **대리점** | 6 | 산하 지점 및 기능 관리 | 산하 지점 데이터만 |
| **지점** | 4 | 상품 등록, 재고/주문 관리 | 자신의 지점 데이터만 |

### 2.3. 관리자 타입

각 계층은 **메인 관리자**와 **서브 관리자**로 구분됩니다:

- **메인 관리자 (`main`)**: 계층 생성 시 자동 생성, 해당 계층의 모든 권한 보유
- **서브 관리자 (`sub`)**: 별도 추가, 메인 관리자가 권한을 명시적으로 배정

---

## 3. 데이터베이스 설계

### 3.1. 기존 테이블 확장

#### `g5_member` 테이블 추가 필드

| 필드명 | 타입 | 설명 | 예시 값 |
|--------|------|------|---------|
| `mb_level` | `int` | 계층 레벨 | 본사(10), 총판(8), 대리점(6), 지점(4) |
| `dmk_mb_type` | `tinyint(1)` | 도메까 회원 타입 | 0:본사, 1:총판, 2:대리점, 3:지점, 4:일반회원 |
| `dmk_dt_id` | `varchar(20)` | 소속 총판 ID | `DT001` (nullable) |
| `dmk_ag_id` | `varchar(20)` | 소속 대리점 ID | `AG001` (nullable) |
| `dmk_br_id` | `varchar(20)` | 소속 지점 ID | `BR001` (nullable) |
| `dmk_admin_type` | `varchar(10)` | 관리자 타입 | `main`, `sub` |
| `dmk_mb_owner_type` | `varchar(20)` | 상위 계층 종류 | `distributor`, `agency`, `branch` |
| `dmk_mb_owner_id` | `varchar(20)` | 상위 계층 ID | 해당 계층의 고유 ID |

#### 필드 역할 구분

- **`dmk_mb_type`**: 회원의 **주요 역할/계층**을 정의
- **`dmk_mb_owner_type`**: 하위 관리자의 **소속/계층적 관계**를 정의

### 3.2. 계층 정보 관리 테이블

#### `dmk_distributor` (총판 정보)
```sql
CREATE TABLE `dmk_distributor` (
  `id` int AUTO_INCREMENT PRIMARY KEY,
  `dt_id` varchar(20) UNIQUE NOT NULL,
  `dt_datetime` datetime DEFAULT CURRENT_TIMESTAMP,
  `dt_status` tinyint(1) DEFAULT 1,
  `dt_created_by` varchar(20),
  `dt_admin_type` varchar(10) DEFAULT 'main'
);
```

#### `dmk_agency` (대리점 정보)
```sql
CREATE TABLE `dmk_agency` (
  `id` int AUTO_INCREMENT PRIMARY KEY,
  `ag_id` varchar(20) UNIQUE NOT NULL,
  `dt_id` varchar(20) NOT NULL COMMENT 'FK to dmk_distributor',
  `ag_datetime` datetime DEFAULT CURRENT_TIMESTAMP,
  `ag_status` tinyint(1) DEFAULT 1,
  `ag_created_by` varchar(20),
  `ag_admin_type` varchar(10) DEFAULT 'main'
);
```

#### `dmk_branch` (지점 정보)
```sql
CREATE TABLE `dmk_branch` (
  `id` int AUTO_INCREMENT PRIMARY KEY,
  `br_id` varchar(20) UNIQUE NOT NULL,
  `ag_id` varchar(20) NOT NULL COMMENT 'FK to dmk_agency',
  `br_datetime` datetime DEFAULT CURRENT_TIMESTAMP,
  `br_status` tinyint(1) DEFAULT 1,
  `br_created_by` varchar(20),
  `br_admin_type` varchar(10) DEFAULT 'main',
  `br_shortcut_code` varchar(10) UNIQUE NOT NULL
);
```

### 3.3. 관리자 액션 로깅

#### `dmk_action_logs` (관리자 액션 기록)
모든 관리자 메뉴 조작(`view`, `insert`, `edit`)을 기록하여 책임 추적이 가능하도록 합니다.

---

## 4. 권한 및 접근 제어

### 4.1. 권한 관리 시스템

**중앙 집중식 권한 관리**: `dmk/dmk_global_settings.php`의 `$DMK_MENU_CONFIG` 배열에서 모든 메뉴 접근 권한을 정의하고, `dmk_is_menu_allowed()` 함수를 통해 제어합니다.

### 4.2. 계층별 권한 규칙

```mermaid
graph LR
    A[본사] --> B[총판 기능]
    A --> C[대리점 기능]
    A --> D[지점 기능]
    
    B --> C
    B --> D
    
    C --> D
    
    style A fill:#ff9999
    style B fill:#99ccff
    style C fill:#99ff99
    style D fill:#ffcc99
```

| 계층 | 자신의 권한 | 하위 계층 권한 | 제한 사항 |
|------|-------------|----------------|-----------|
| **본사** | ✅ 모든 기능 | ✅ 모든 하위 계층 | 없음 |
| **총판** | ✅ 총판 기능 | ✅ 대리점, 지점 | 다른 총판 데이터 접근 불가 |
| **대리점** | ✅ 대리점 기능 | ✅ 산하 지점만 | 다른 대리점/총판 데이터 접근 불가 |
| **지점** | ✅ 지점 기능 | ❌ 없음 | 자신의 지점 데이터만 |

### 4.3. 데이터 가시성 제어

**원칙**: 각 계층은 자신과 하위 계층의 데이터만 조회 가능합니다.

### 4.4. 서브 관리자 권한 시스템

- **기본 상태**: `sub` 관리자는 아무런 권한 없음
- **권한 배정**: `main` 관리자가 명시적으로 권한 부여
- **권한 관리**: 기존 영카트의 `auth.php` 시스템 확장 활용 (완료)

---

## 5. UI/UX 설계 원칙

### 5.1. 계층 선택 UI

#### 동적 선택박스 구현
```mermaid
sequenceDiagram
    participant U as 사용자
    participant F as 프론트엔드
    participant A as AJAX
    participant B as 백엔드
    
    U->>F: 총판 선택
    F->>A: 총판 ID 전송
    A->>B: 대리점 목록 요청
    B-->>A: 해당 총판의 대리점 목록
    A-->>F: 대리점 선택박스 업데이트
    F-->>U: 대리점 선택 가능
```

#### 계층별 선택박스 표시 규칙

| 접속 계층 | 총판 선택박스 | 대리점 선택박스 | 지점 선택박스 |
|-----------|---------------|-----------------|---------------|
| **본사** | ✅ 표시 | ✅ 표시 | ✅ 표시 |
| **총판** | ❌ 숨김 | ✅ 표시 | ✅ 표시 |
| **대리점** | ❌ 숨김 | ❌ 숨김 | ✅ 표시 |
| **지점** | ❌ 숨김 | ❌ 숨김 | ❌ 숨김 |

### 5.2. 공유 메뉴 처리

#### 매출/통계 현황 페이지
- **본사**: 전체 매출 + 선택박스를 통한 특정 계층 매출 확인
- **총판**: 산하 대리점/지점 선택박스를 통한 매출 확인
- **대리점**: 산하 지점 선택박스를 통한 매출 확인

#### 목록 페이지 필터링
- **검색 기능과 별개**: 상단에 계층 선택박스 제공
- **실시간 필터링**: 선택박스 변경 시 즉시 결과 반영
- **AJAX 구현**: 동적 선택박스 연동

### 5.3. 목록 페이지 UI 구성

#### 필수 구성 요소
1. **계층 선택 영역** (페이지 최상단)
2. **검색 기능** (기존 기능 유지)
3. **목록 테이블** (계층 정보 표시 컬럼 추가)

#### 목록 필드 구성
```
[계층정보] [IDX] [기존필드1] [기존필드2] ... [액션]
```

### 5.4. 데이터 등록/수정 페이지

#### 소유 계층 정보 표시
상품 등록 등에서 다음 요소가 필요합니다:
- **계층구조 선택박스**: 상단에 계층 선택박스 제공
- **실시간 필터링**: 선택박스 변경 시 즉시 결과 반영
- **AJAX 구현**: 동적 선택박스 연동

### 5.5. 메뉴 상태 표시

새로운 기능과 개조된 기능을 시각적으로 구분합니다:

- **신규 메뉴**: `<i class="fa fa-star" title="NEW"></i>` ⭐
- **개조 메뉴**: `<i class="fa fa-flag" title="개조"></i>` 🚩

---

## 6. 기존 시스템 확장 원칙

### 6.1. Open/Closed 원칙 준수

> **"확장에는 열려있고, 수정에는 닫혀있어야 한다"**

#### ✅ 권장 방법
- **후크(Hook) 활용**: 그누보드/영카트 제공 후크 시스템 사용
- **래퍼(Wrapper) 함수**: 기존 함수를 감싸는 새로운 함수 생성
- **새 모듈 추가**: `dmk/` 폴더 내 독립적인 모듈 구현
- **설정 기반 제어**: `dmk_global_settings.php`를 통한 기능 제어

#### ❌ 지양할 방법
- 기존 핵심 파일 직접 수정
- 파일 전체 복사 후 수정
- 기존 함수/클래스 무분별한 오버라이딩

### 6.2. 기존 기능 '개조' 정의

**개조**란 기존 기능을 다중 계층을 지원하도록 확장하는 것입니다:

1. **핵심 로직 보존**: 기존 기능의 안정성 유지
2. **계층 지원 추가**: 계층별 데이터 필터링 및 권한 검증 로직 추가
3. **UI 확장**: 계층 선택 인터페이스 추가

### 6.3. 공통 라이브러리 구성

#### 필수 공통 함수
- `dmk_get_hierarchy_selectbox()`: 계층별 선택박스 생성 (chained AJAX)
- `dmk_filter_data_by_hierarchy()`: 계층별 데이터 필터링
- `dmk_check_hierarchy_permission()`: 계층별 권한 검증
- `dmk_log_admin_action()`: 관리자 액션 로깅

### 6.4. 메뉴 관리 원칙

#### 기존 메뉴 보호
- **절대 삭제 금지**: 영카트 기존 메뉴는 임의로 삭제 불가
- **개조 우선**: 기존 메뉴를 계층 지원으로 확장
- **신규 메뉴**: 기존 기능이 없는 경우에만 새로 생성

---

## 7. 상품 및 주문 관리

### 7.1. 지점별 주문 페이지 (프론트엔드)

#### URL 구조
```
도메인/{지점ID}
예: https://domaeka.com/BR001
```

#### 주요 기능
- **카카오톡 로그인** 기반 주문 시스템
- **지점별 상품** 목록 및 상세 정보
- **재고 관리** 및 주문 불가 처리
- **주문 정보 수집** (고객명, 전화번호, 요청사항)
- **매출 자동 집계**: 해당 지점 매출로 자동 분류

### 7.2. 상품 구독 시스템

상위 계층(총판/대리점)의 상품을 하위 계층(대리점/지점)에서 구독하여 판매할 수 있는 시스템입니다.

```mermaid
graph TD
    A[총판 상품 등록] --> B[대리점 구독]
    B --> C[대리점 주문페이지 노출]
    A --> D[지점 구독]
    D --> E[지점 주문페이지 노출]
    
    F[대리점 상품 등록] --> G[지점 구독]
    G --> H[지점 주문페이지 노출]
```

### 7.3. 관리자 시스템 확장

#### 기존 시스템 활용
- **`adm/shop_admin/` 확장**: 기존 영카트 쇼핑몰 관리 모듈 확장
- **계층별 권한 적용**: 공통 함수/라이브러리를 통한 일관된 권한 검증
- **데이터 필터링**: 계층별 가시성 규칙 적용

#### 관리 기능
- **상품 등록/수정**: 계층별 소유권 검증
- **주문 내역 조회**: 계층별 접근 범위 제한
- **재고 현황**: 계층별 재고 관리
- **상품 유효기간**: 도매까 비즈니스 모델 지원

---

## 8. 개발 프로세스

### 8.1. 개발 순서

1. **설계 단계**: 상세 의사코드(pseudocode) 작성
2. **데이터 모델링**: 데이터베이스 스키마 설계
3. **권한 로직**: 계층별 권한 검증 시스템 구현
4. **UI 컴포넌트**: 공통 UI 라이브러리 개발
5. **기능 구현**: 계층별 기능 단계적 구현
6. **테스트**: 단위 테스트 및 통합 테스트
7. **문서화**: 코드 주석 및 API 문서 작성

### 8.2. 파일 구조

```
dmk/
├── adm/                    # 관리자 기능
│   ├── hierarchy/          # 계층 관리
│   └── lib/               # 공통 라이브러리
├── docs/                  # 문서
│   └── g5_modifications_log.md
├── includes/              # 공통 함수
└── dmk_global_settings.php
```

### 8.3. 신규 파일 위치

**목적**: 기존 `g5`와 새로운 기능을 명확히 구분

모든 새로운 파일은 `main/dmk/` 폴더에 작성하여 기존 시스템과 분리합니다.

---

## 9. 품질 관리

### 9.1. 코드 품질 기준

| 항목 | 요구사항 |
|------|----------|
| **단일 책임** | 각 함수/클래스는 하나의 명확한 책임만 가짐 |
| **테스트 가능성** | 모든 코드는 단위 테스트 가능한 구조 |
| **문서화** | 모든 공개 함수는 docstring 필수 |
| **보안** | 모든 관리자 액션에 권한 검증 필수 |

### 9.2. 데이터베이스 관리

#### ⚠️ 중요 주의사항

| 구분 | 규칙 |
|------|------|
| **절대 금지** | `migrate:fresh`, `migrate:reset`, `DROP TABLE`, `TRUNCATE TABLE` |
| **필수 사항** | 마이그레이션 전 백업, 롤백 스크립트 작성 |
| **승인 필요** | 모든 스키마 변경은 사전 검토 및 승인 필요 |
| **사용자 승인** | 기존 데이터 영향 작업은 명시적 승인 필요 |

#### 마이그레이션 원칙
- **기존 테이블 보호**: 절대 삭제하거나 파괴적 변경 금지
- **점진적 전환**: 기존 시스템과 병렬 운영 후 검증 완료 시 전환
- **백업 필수**: 모든 변경 전 SQL 덤프 생성 및 보관

### 9.3. 레거시 코드 관리

#### 수정 내역 문서화 (`dmk/docs/g5_modifications_log.md`)

모든 기존 `g5` 파일 수정 시 다음 정보를 기록합니다:

- **수정 파일 경로**: `g5` 내 상대 경로
- **수정 일자**: UTC ISO 8601 형식
- **수정자**: 변경 수행한 개발자
- **수정 내용 요약**: 변경 이유 및 내용
- **상세 변경 내역**: 실제 코드 변경 내용
- **관련 기능**: 연관된 도메까 기능 명시

### 9.4. 관리자 액션 로깅

모든 관리자 페이지 조작을 `dmk_action_logs` 테이블에 기록:

- **view**: 페이지 조회 기록
- **insert**: 데이터 등록 및 입력 내용 기록
- **edit**: 데이터 수정 및 변경 내용 기록

---

## 10. 부록

### 10.1. 용어 정의

| 용어 | 설명 |
|------|------|
| **계층** | 본사, 총판, 대리점, 지점의 관리 단계 |
| **개조** | 기존 기능을 다중 계층 지원으로 확장 |
| **구독** | 상위 계층 상품을 하위 계층에서 판매하는 기능 |
| **메인 관리자** | 계층 생성 시 자동 생성되는 최고 권한자 |
| **서브 관리자** | 별도 추가되는 제한된 권한 관리자 |

### 10.2. 개발 환경

- **MySQL MCP 연결**: 직접 DB 조회 및 조작 가능
- **기본 인코딩**: utf8mb4
- **기본 엔진**: InnoDB
- **ID 컬럼 명명**: 모든 auto_increment ID는 `id`로 통일

### 10.3. 참고 자료

- 영카트5 공식 문서
- 그누보드5 개발 가이드
- PHP 코딩 표준 (PSR-12)
- MySQL 최적화 가이드

---

**이 문서는 Domaeka 프로젝트의 성공적인 구현을 위한 핵심 지침입니다. 모든 개발자는 이 규칙을 철저히 준수하여 안정적이고 확장 가능한 시스템을 구축해야 합니다.**
